---
import { getEntry } from "astro:content";
import { Image } from "astro:assets";
import Filler from "../components/elements/filler.astro";

interface Props {
  slug: string;
  hideImage?: boolean;
}
const { slug, hideImage } = Astro.props;

const blogPostEntry = await getEntry("blog", slug);

const dateFormatOption = {
  day: "numeric",
  month: "long",
  year: "numeric",
} as const;
---

{
  blogPostEntry && (
    <a class="blog-entry theme-card" href={`/blag/posts/${blogPostEntry.slug}/`}>
      {hideImage !== true && (
        <div class="coverImage">
          {blogPostEntry.data.coverImage ? (
            <Image
              alt={blogPostEntry.data.coverAlt ?? "Cover Image"}
              src={blogPostEntry.data.coverImage}
            />
          ) : (
            <Filler />
          )}
        </div>
      )}
      <div class="card-content">
        <h2>{blogPostEntry.data.title}</h2>
        {blogPostEntry.data.description && (
          <p class="description">{blogPostEntry.data.description}</p>
        )}
        <div class="details">
          <time datetime={blogPostEntry.data.date.toISOString()}>
            {blogPostEntry.data.date.toLocaleDateString(
              "en-US",
              dateFormatOption,
            )}
          </time>
          {blogPostEntry.data.tags && (
            <>
              <span class="separator">â€¢</span>
              <div class="tags">
                {blogPostEntry.data.tags.map((tag: string) => (
                  <span class="tag">#{tag}</span>
                ))}
              </div>
            </>
          )}
          {blogPostEntry.data.hidden && (<div>ðŸ”’</div>)}
        </div>
      </div>
    </a>
  )
}

<style>
  .blog-entry {
    display: flex;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: 1rem;
    text-decoration: none;
    color: var(--text);
    width: 100%;
    font-family: var(--font-family);
    padding: 1rem;
    border-radius: calc(var(--border-radius) * 2);
    height: max-content;
  }

  .blog-entry:hover {
    border-color: var(--primary-color);
  }

  .blog-entry .card-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }

  .blog-entry .coverImage {
    display: flex;
    width: 100%;
    height: 100%;
    max-width: 100%;
    max-height: 300px;
    overflow: hidden;
    align-items: flex-start;
  }

  .blog-entry .coverImage img {
    width: auto;
    height: 100%;
    max-width: 100%;
    object-fit: cover;
    object-position: center;
    border-radius: var(--border-radius);
    margin: 0;
    filter: saturate(1);
    transition: filter 0.2s ease-in-out;
  }

  .blog-entry .coverImage :global(svg) {
    width: 100%;
    height: 100%;
  }

  .blog-entry:hover .coverImage img {
    filter: saturate(1.2);
  }

  .blog-entry .description {
    color: var(--text);
  }

  .blog-entry h2,
  .blog-entry p {
    width: 100%;
    margin: 0;
  }

  .blog-entry h2 {
    font-size: var(--font-size-lg);
    color: var(--heading);
  }

  .blog-entry .details {
    color: var(--fadeText);
    width: 100%;
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .author-icon {
    border-radius: 50%;
  }

  .blog-entry .details time {
    font-size: var(--font-size-sm);
  }

  .blog-entry:hover h2 {
    background: var(--animated-gradient);
    background-size: 200% 200%;
    animation: backgroundMove 3s ease infinite;
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .blog-entry .tags {
    display: flex;
    flex-direction: row;
    gap: 0.5rem;
    font-size: var(--font-size-sm);
  }

  @media (max-width: 390px) {
    .blog-entry .details {
      gap: 0.5rem;
    }
    .blog-entry .details div {
      flex-direction: row;
      flex-wrap: wrap;
      align-items: center;
      width: 100%;
      gap: 0.5rem;
    }
    .blog-entry .details time {
      font-size: 0.8rem;
    }
  }
</style>
